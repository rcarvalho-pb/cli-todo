// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tb_tasks WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const findTaskById = `-- name: FindTaskById :one
SELECT id, title, is_completed, created_at, completed_at FROM tb_tasks WHERE id = ?
`

func (q *Queries) FindTaskById(ctx context.Context, id int64) (TbTask, error) {
	row := q.db.QueryRowContext(ctx, findTaskById, id)
	var i TbTask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const findTaskByTitle = `-- name: FindTaskByTitle :many
SELECT id, title, is_completed, created_at, completed_at FROM tb_tasks WHERE title LIKE CONCAT('%', ?, '%')
`

func (q *Queries) FindTaskByTitle(ctx context.Context, concat interface{}) ([]TbTask, error) {
	rows, err := q.db.QueryContext(ctx, findTaskByTitle, concat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbTask
	for rows.Next() {
		var i TbTask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFinishedTasks = `-- name: GetAllFinishedTasks :many
SELECT id, title, is_completed, created_at, completed_at FROM tb_tasks WHERE is_completed = 1
`

func (q *Queries) GetAllFinishedTasks(ctx context.Context) ([]TbTask, error) {
	rows, err := q.db.QueryContext(ctx, getAllFinishedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbTask
	for rows.Next() {
		var i TbTask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, title, is_completed, created_at, completed_at FROM tb_tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]TbTask, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbTask
	for rows.Next() {
		var i TbTask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnfinishedTasks = `-- name: GetAllUnfinishedTasks :many
SELECT id, title, is_completed, created_at, completed_at FROM tb_tasks WHERE is_completed = 0
`

func (q *Queries) GetAllUnfinishedTasks(ctx context.Context) ([]TbTask, error) {
	rows, err := q.db.QueryContext(ctx, getAllUnfinishedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbTask
	for rows.Next() {
		var i TbTask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newTask = `-- name: NewTask :one
INSERT INTO tb_tasks (title) VALUES (?) RETURNING id, title, is_completed, created_at, completed_at
`

func (q *Queries) NewTask(ctx context.Context, title string) (TbTask, error) {
	row := q.db.QueryRowContext(ctx, newTask, title)
	var i TbTask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const toogleTask = `-- name: ToogleTask :exec
UPDATE tb_tasks SET is_completed = ?, completed_at = ? WHERE id = ? RETURNING id, title, is_completed, created_at, completed_at
`

type ToogleTaskParams struct {
	IsCompleted bool
	CompletedAt time.Time
	ID          int64
}

func (q *Queries) ToogleTask(ctx context.Context, arg ToogleTaskParams) error {
	_, err := q.db.ExecContext(ctx, toogleTask, arg.IsCompleted, arg.CompletedAt, arg.ID)
	return err
}

const updateTaskTitle = `-- name: UpdateTaskTitle :exec
UPDATE tb_tasks SET title = ? WHERE id = ? RETURNING id, title, is_completed, created_at, completed_at
`

type UpdateTaskTitleParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdateTaskTitle(ctx context.Context, arg UpdateTaskTitleParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskTitle, arg.Title, arg.ID)
	return err
}
