// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const completeTodo = `-- name: CompleteTodo :exec
UPDATE tb_todos SET status = 2 WHERE id = ?
`

func (q *Queries) CompleteTodo(ctx context.Context, id sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, completeTodo, id)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM tb_todos WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const findTodoByTitle = `-- name: FindTodoByTitle :many
SELECT id, title, status, created_at, modified_at, completed_at FROM tb_todos WHERE title LIKE CONCAT('%', ?, '%')
`

func (q *Queries) FindTodoByTitle(ctx context.Context, concat interface{}) ([]TbTodo, error) {
	rows, err := q.db.QueryContext(ctx, findTodoByTitle, concat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbTodo
	for rows.Next() {
		var i TbTodo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFinishedTodos = `-- name: GetAllFinishedTodos :many
SELECT id, title, status, created_at, modified_at, completed_at FROM tb_todos WHERE status = 2
`

func (q *Queries) GetAllFinishedTodos(ctx context.Context) ([]TbTodo, error) {
	rows, err := q.db.QueryContext(ctx, getAllFinishedTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbTodo
	for rows.Next() {
		var i TbTodo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTodos = `-- name: GetAllTodos :many
SELECT id, title, status, created_at, modified_at, completed_at FROM tb_todos
`

func (q *Queries) GetAllTodos(ctx context.Context) ([]TbTodo, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbTodo
	for rows.Next() {
		var i TbTodo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnfinishedTodos = `-- name: GetAllUnfinishedTodos :many
SELECT id, title, status, created_at, modified_at, completed_at FROM tb_todos WHERE status <> 2
`

func (q *Queries) GetAllUnfinishedTodos(ctx context.Context) ([]TbTodo, error) {
	rows, err := q.db.QueryContext(ctx, getAllUnfinishedTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbTodo
	for rows.Next() {
		var i TbTodo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newTodo = `-- name: NewTodo :one
INSERT INTO tb_todos (title) VALUES (?) RETURNING id, title, status, created_at, modified_at, completed_at
`

func (q *Queries) NewTodo(ctx context.Context, title string) (TbTodo, error) {
	row := q.db.QueryRowContext(ctx, newTodo, title)
	var i TbTodo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.CompletedAt,
	)
	return i, err
}

const reopenTodo = `-- name: ReopenTodo :exec
UPDATE tb_todos SET status = 1 WHERE id = ?
`

func (q *Queries) ReopenTodo(ctx context.Context, id sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, reopenTodo, id)
	return err
}

const startTodo = `-- name: StartTodo :exec
UPDATE tb_todos SET status = 1 WHERE id = ?
`

func (q *Queries) StartTodo(ctx context.Context, id sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, startTodo, id)
	return err
}

const updateTodoModifiedDate = `-- name: UpdateTodoModifiedDate :exec
UPDATE tb_todos SET modified_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) UpdateTodoModifiedDate(ctx context.Context, id sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, updateTodoModifiedDate, id)
	return err
}

const updateTodoTitle = `-- name: UpdateTodoTitle :exec
UPDATE tb_todos SET title = ? WHERE id = ?
`

type UpdateTodoTitleParams struct {
	Title string
	ID    sql.NullInt64
}

func (q *Queries) UpdateTodoTitle(ctx context.Context, arg UpdateTodoTitleParams) error {
	_, err := q.db.ExecContext(ctx, updateTodoTitle, arg.Title, arg.ID)
	return err
}
